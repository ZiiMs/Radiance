// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    username       String?          @unique
    isRegistered   Boolean          @default(false)
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Servers        Server[]
    Messages       Messages[]
    Channels       Channels[]
    Friend         Friend[]         @relation("Friend")
    FriendOf       Friend[]         @relation()
    DirectMessages DirectMessages[]
}

model Friend {
    id       String           @id @default(cuid())
    User     User             @relation(name: "Friend", fields: [userId], references: [id])
    userId   String
    Messages DirectMessages[]
    Friend   User             @relation(fields: [friendId], references: [id])
    friendId String
}

model DirectMessages {
    id         Int      @id @default(autoincrement())
    text       String
    createdAt  DateTime @unique @default(now())
    updatedAt  DateTime @updatedAt
    Sender     User     @relation(fields: [senderId], references: [id])
    senderId   String
    Reciever   Friend   @relation(fields: [recieverId], references: [id])
    recieverId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Server {
    id        String     @id @default(cuid())
    name      String
    image     String?
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
    Channels  Channels[]
    Users     User[]
}

model Channels {
    id        String     @id @default(cuid())
    name      String
    private   Boolean
    Users     User[]
    Messages  Messages[]
    Server    Server     @relation(fields: [serversId], references: [id])
    serversId String
}

model Messages {
    id         String   @id @default(cuid())
    body       String
    User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    Channels   Channels @relation(fields: [channelsId], references: [id], onDelete: Cascade)
    channelsId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now())
}
